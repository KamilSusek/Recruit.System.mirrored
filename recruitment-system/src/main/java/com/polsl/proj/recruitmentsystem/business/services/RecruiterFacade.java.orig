package com.polsl.proj.recruitmentsystem.business.services;


import com.polsl.proj.recruitmentsystem.business.model.DTO.InputDTO.*;
import com.polsl.proj.recruitmentsystem.business.model.DTO.OutputDTO.JobOutDTO;
import com.polsl.proj.recruitmentsystem.business.model.DTO.POJOs.TrainingPOJO;
import com.polsl.proj.recruitmentsystem.business.model.people.Recruit;
import com.polsl.proj.recruitmentsystem.business.model.people.Recruiter;
import com.polsl.proj.recruitmentsystem.business.model.recruitAttributes.Training;
<<<<<<< HEAD
=======
import com.polsl.proj.recruitmentsystem.business.model.recruitmentParams.JobApplication;
>>>>>>> branch_reanimacja
import com.polsl.proj.recruitmentsystem.business.utils.file.FileUtility;
import com.polsl.proj.recruitmentsystem.repositories.people.RecruitRepository;
import com.polsl.proj.recruitmentsystem.repositories.people.RecruiterRepository;
import com.polsl.proj.recruitmentsystem.repositories.recruitAttibutes.TrainingRepository;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.NoSuchElementException;

@Component
@AllArgsConstructor
public class RecruiterFacade {

    // Autowired jest wymagany dla POSTMAN / INSOMNIA  up: final tez dziala
<<<<<<< HEAD
=======
    private final RecruitRepository recruitRepository;
    private final TrainingRepository trainingRepository;
    private final JobApplicationRepository jobApplicationRepository;
    private final RecruiterService service;
    private final RecruiterRepository recruiterRepository;
    private final FileUtility fileUtils;
>>>>>>> branch_reanimacja

    private final RecruiterService service;
    private final FileUtility fileUtils;

<<<<<<< HEAD

=======
>>>>>>> branch_reanimacja
    public void addNewApplication(RecruitDTO recruitDTO, InputRecruitAttributesDTO attributesDTO) {
       service.addNewApplication(recruitDTO,attributesDTO);
    }

<<<<<<< HEAD

    public void addTraining(TrainingPOJO dto) {
        service.addTraining(dto);
    }

    public Recruiter findByName(String name) {
        try{
        Recruiter result = service.findByName(name);
            return result;
        }
        catch (NoSuchElementException exception){
            return  null;
        }
    }
=======
>>>>>>> branch_reanimacja

    public void saveFile(MultipartFile file) throws Exception {
        fileUtils.save(file, 0);
    }

<<<<<<< HEAD
    public List<JobOutDTO> findAllMatchingRecruits(SearchParametersFINAL dto) {
       return service.findAllMatching(dto);
=======
    public Recruiter findByName(String name) {
        return recruiterRepository.findByFirstName(name).get();
    }

    public void saveFile(MultipartFile file) throws Exception {
        fileUtils.save(file, 0);
>>>>>>> branch_reanimacja
    }
}
